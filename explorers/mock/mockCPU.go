// Code generated by MockGen. DO NOT EDIT.
// Source: exporterCPU.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICPUInfo is a mock of ICPUInfo interface.
type MockICPUInfo struct {
	ctrl     *gomock.Controller
	recorder *MockICPUInfoMockRecorder
}

// MockICPUInfoMockRecorder is the mock recorder for MockICPUInfo.
type MockICPUInfoMockRecorder struct {
	mock *MockICPUInfo
}

// NewMockICPUInfo creates a new mock instance.
func NewMockICPUInfo(ctrl *gomock.Controller) *MockICPUInfo {
	mock := &MockICPUInfo{ctrl: ctrl}
	mock.recorder = &MockICPUInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICPUInfo) EXPECT() *MockICPUInfoMockRecorder {
	return m.recorder
}

// TotalCPUPercent mocks base method.
func (m *MockICPUInfo) TotalCPUPercent(interval time.Duration, percpu bool) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalCPUPercent", interval, percpu)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalCPUPercent indicates an expected call of TotalCPUPercent.
func (mr *MockICPUInfoMockRecorder) TotalCPUPercent(interval, percpu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalCPUPercent", reflect.TypeOf((*MockICPUInfo)(nil).TotalCPUPercent), interval, percpu)
}
