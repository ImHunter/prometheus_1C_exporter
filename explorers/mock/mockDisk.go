// Code generated by MockGen. DO NOT EDIT.
// Source: exporterDisk.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	disk "github.com/shirou/gopsutil/disk"
)

// MockIDiskInfo is a mock of IDiskInfo interface.
type MockIDiskInfo struct {
	ctrl     *gomock.Controller
	recorder *MockIDiskInfoMockRecorder
}

// MockIDiskInfoMockRecorder is the mock recorder for MockIDiskInfo.
type MockIDiskInfoMockRecorder struct {
	mock *MockIDiskInfo
}

// NewMockIDiskInfo creates a new mock instance.
func NewMockIDiskInfo(ctrl *gomock.Controller) *MockIDiskInfo {
	mock := &MockIDiskInfo{ctrl: ctrl}
	mock.recorder = &MockIDiskInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDiskInfo) EXPECT() *MockIDiskInfoMockRecorder {
	return m.recorder
}

// IOCounters mocks base method.
func (m *MockIDiskInfo) IOCounters(names ...string) (map[string]disk.IOCountersStat, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IOCounters", varargs...)
	ret0, _ := ret[0].(map[string]disk.IOCountersStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IOCounters indicates an expected call of IOCounters.
func (mr *MockIDiskInfoMockRecorder) IOCounters(names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOCounters", reflect.TypeOf((*MockIDiskInfo)(nil).IOCounters), names...)
}
