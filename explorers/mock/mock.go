// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockIPrometheusMetric is a mock of IPrometheusMetric interface.
type MockIPrometheusMetric struct {
	ctrl     *gomock.Controller
	recorder *MockIPrometheusMetricMockRecorder
}

// MockIPrometheusMetricMockRecorder is the mock recorder for MockIPrometheusMetric.
type MockIPrometheusMetricMockRecorder struct {
	mock *MockIPrometheusMetric
}

// NewMockIPrometheusMetric creates a new mock instance.
func NewMockIPrometheusMetric(ctrl *gomock.Controller) *MockIPrometheusMetric {
	mock := &MockIPrometheusMetric{ctrl: ctrl}
	mock.recorder = &MockIPrometheusMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPrometheusMetric) EXPECT() *MockIPrometheusMetricMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockIPrometheusMetric) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect.
func (mr *MockIPrometheusMetricMockRecorder) Collect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockIPrometheusMetric)(nil).Collect), arg0)
}

// Describe mocks base method.
func (m *MockIPrometheusMetric) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockIPrometheusMetricMockRecorder) Describe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockIPrometheusMetric)(nil).Describe), arg0)
}

// Reset mocks base method.
func (m *MockIPrometheusMetric) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockIPrometheusMetricMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockIPrometheusMetric)(nil).Reset))
}

// WithLabelValues mocks base method.
func (m *MockIPrometheusMetric) WithLabelValues(lvs ...string) prometheus.Observer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockIPrometheusMetricMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockIPrometheusMetric)(nil).WithLabelValues), lvs...)
}
